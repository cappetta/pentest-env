* Pentest Environment Deployment

This tool provide an easy way to deploy a clean pentesting environment with Kali linux using vagrant and virtualbox.

** Requirements
I assume you are familiar with openstack and vagrant.
- http://www.vagrantup.com/
- https://www.openstack.com

Latest pentest-env release is tested with:
- Virtualbox (4.3.30)
- Vagrant (1.7.4)

** Current box
*** Kali 2.0
- http://ftp.sliim-projects.eu/boxes/kali-2.0-amd64.box
- http://ftp.sliim-projects.eu/boxes/kali-2.0-light-amd64.box

**** Changes details
Fresh install from kali.org

 - Installation of linux kernel headers for vbox guest additions.
 - Installation of virtualbox guest additions.
 - Authorized keys for ~root~ user are stored in ~ssh-keys/~ directory (no passphrase).
 - Enabling ~rpcbind~ and ~ssh~ services at boot.

*Please don't forget to read security warning below !*

** Installation
You will need rake and berkshelf for vm provisionning, you can install it with rubygems:
#+BEGIN_SRC shell
gem install rake berkshelf
#+END_SRC

Clone pentest-env repository and its submodules:
#+BEGIN_SRC shell
git clone https://github.com/Sliim/pentest-env.git
cd pentest-env/
git submodule init
git submodule update
#+END_SRC
Or in one line:
#+BEGIN_SRC shell
git clone https://github.com/Sliim/pentest-env.git --recursive
#+END_SRC

Install cookbooks dependencies:
#+BEGIN_SRC shell
rake
#+END_SRC

** Usage
*** Running Kali linux
Pentest-env works with Vagrant, so all you need to know is to use basic vagrant features :)
To run kali instance:
#+BEGIN_SRC shell
vagrant up kali
#+END_SRC

*** Pentest-env customizations
Since Pentest-env 0.5.0, customizations are stored in ~$HOME/.pentestrc~ file as YAML format.
An example of configuration file is available at the root of this repository named ~pentestrc.example~

You can copy and edit it for your needs:
#+BEGIN_SRC shell
cp pentestrc.example ~/.pentestrc
#+END_SRC

Here is a minimal configuration:
#+BEGIN_SRC yaml
scripts_path: ~/.pentest.d/scripts
targets_path: ~/.pentest.d/targets
targets: []
#+END_SRC

This setup set your ~scripts~ and ~targets~ directories used by pentest-env.
It also set an empty target list.. if you just want to run a Kali instance..

**** Kali linux customizations
You can perform many customizations on kali linux instance.
Just add ~kali~ key in your ~$HOME/.pentestrc~, below the availables customizations:
- ~packages~ - An array of apt packages to install
- ~commands~ - List of command to run as inline shell script
- ~scripts~ - List of scripts to execute. They must be located in ~scripts_path~ directory
- ~synced_folders~ - Hash for forlders to sync with the instance

Example:
#+BEGIN_SRC yaml
kali:
  packages: [git-core]
  commands:
  - curl https://opscode-omnibus-packages.s3.amazonaws.com/debian/6/x86_64/chef_12.0.3-1_amd64.deb -o chef.deb && sudo dpkg -i chef.deb
  scripts: [openvas.sh]
  synced_folders: {data: /pentest}
#+END_SRC

**** Targets customization
You can easily deploy targets with your kali instance.
Pentest-env comes with some targets ready to use:
- ~dvwa~ - DVWA (Damn Vulnerable Web Application) - http://www.dvwa.co.uk/
- ~vicnum~ - OWASP Vicnum - https://www.owasp.org/index.php/Category:OWASP_Vicnum_Project
- ~gruyere~ - Google Gruyere - http://google-gruyere.appspot.com/
- ~bricks~ - OWASP Bricks - https://www.owasp.org/index.php/OWASP_Bricks
- ~webgoat~ - OWASP WebGoat - https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project

To setup targets to deploy, edit your ~$HOME/.pentestrc~ and set the ~targets~ list:

#+BEGIN_SRC yaml
targets: [dvwa vicnum]
#+END_SRC

You can add your own targets in your ~targets_path~ directory and use them in your ~targets~ list.

Targets instance can be customized same as the kali instance, use the target's name as a key in your configuration file to customize the targets:
#+BEGIN_SRC yaml
dvwa:
  packages: [git-core]
vicnum:
  packages: [git-core]
#+END_SRC

*** Pentest Chef repo
~chef-solo~ is used as the provisioner. You need to init git submodules to provision your
Kali with provided roles in [[https://github.com/Sliim/pentest-chef-repo][pentest-chef-repo]]. If this submodule is missing, kali
provisioning will be ignored.

You can add/remove some roles to you Kali linux by editing the provisioning section in ~Vagrantfile~
For example:
#+BEGIN_SRC ruby
kali.vm.provision :chef_solo do |chef|
  ...
  chef.add_recipe('apt')
  chef.add_role('kali-full')
  chef.add_role('faraday')
end
#+END_SRC

See [[https://github.com/Sliim/pentest-chef-repo][pentest-chef-repo]] for a detailed list of available roles.
** Known issues
*** Hostonly on kali linux 1.0 fail
Hostonly connection will be reset at first vm creation.
To resolve this, disconnect connection in gui mode and run in your vagrant directory:
#+BEGIN_SRC shell
vagrant reload kali
#+END_SRC
*** GPG Error: KEYEXPIRED
If you have the following message when you run ~apt-get update~:
#+BEGIN_SRC stdout
W: A error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://security.kali.org kali/updates Release: The foll
owing signatures were invalid: KEYEXPIRED 1425567400 KEYEXPIRED 1425567400 KEYEXPIRED 1425567400
#+END_SRC

You need to update your ~kali-archive-keyring~:
#+BEGIN_SRC stdout
rm -rf /var/lib/apt/lists
apt-get update
apt-get install kali-archive-keyring
#+END_SRC

Source: https://forums.kali.org/showthread.php?24687-Problem-with-apt-get-update
** About boxes
~pentest-env~ boxes are also availables in my atlas profile: https://atlas.hashicorp.com/Sliim
*** Boxes URL
- Kali linux 1.0: http://ftp.sliim-projects.eu/boxes/kali-linux-1.0-amd64.box
  + ~VirtualBox 4.2.10~
  + ~Vagrant 1.0.7~
- Kali linux 1.0.4: http://ftp.sliim-projects.eu/boxes/kali-linux-1.0.4-amd64.box
  + ~VirtualBox 4.2.16~
  + ~Vagrant 1.2.7~
- Kali linux 1.1.0: http://ftp.sliim-projects.eu/boxes/kali-1.1.0-amd64-en-layout.box
  + ~VirtualBox 4.3.20~
  + ~Vagrant 1.7.1~
- Kali linux 2.0: http://ftp.sliim-projects.eu/boxes/kali-2.0-amd64.box
  + ~VirtualBox 4.3.30~
  + ~Vagrant 1.7.4~
- Kali linux 2.0 light: http://ftp.sliim-projects.eu/boxes/kali-2.0-light-amd64.box
  + ~VirtualBox 4.3.30~
  + ~Vagrant 1.7.4~

*** Changes details
Provided boxes are fresh install of Kali linux with some changes:

**** Kali linux 1.0
 - Installation of linux kernel headers for vbox guest additions.
 - Installation of virtualbox guest additions.
 - Installation of ~chef~ package for provisioning.
 - ~vagrant~ user was created for provisionning (Password: ~tnargav~).
 - ~admin~ group don't require password for sudo.
 - ~vagrant~ user is in ~admin~ group.
 - Authorized keys for ~vagrant~ user are stored in ~ssh-keys/~ directory (no passphrase).
 - Enabling ~rpcbind~, ~nfs-common~ and ~ssh~ services at boot.

**** Kali linux 1.0.4
Fresh install from http://cdimage.kali.org/kali-latest/amd64/kali-linux-1.0.4-amd64-mini.iso

 - Installation of linux kernel headers for vbox guest additions.
 - Installation of virtualbox guest additions.
 - Installation of ~chef~ package for provisioning.
 - Authorized keys for ~root~ user are stored in ~ssh-keys/~ directory (no passphrase).
 - Enabling ~rpcbind~, ~nfs-common~ and ~ssh~ services at boot.
 - Modified /etc/issue for vagrant os detection.
 - MAC address for private network was added in /etc/NetworkManager/NetworkManager.conf to disable auto connect.

**** Kali linux 1.1.0
Fresh install from http://cdimage.kali.org/kali-1.1.0a/kali-linux-1.1.0a-amd64.iso

 - Installation of linux kernel headers for vbox guest additions.
 - Installation of virtualbox guest additions.
 - Authorized keys for ~root~ user are stored in ~ssh-keys/~ directory (no passphrase).
 - Enabling ~rpcbind~, ~nfs-common~ and ~ssh~ services at boot.
 - Modified /etc/issue for vagrant os detection.
 - MAC address for private network was added in /etc/NetworkManager/NetworkManager.conf to disable auto connect.

**** Kali linux 2.0
Fresh install from http://cdimage.kali.org/kali-2.0/kali-linux-2.0-amd64.iso

 - Installation of linux kernel headers for vbox guest additions.
 - Installation of virtualbox guest additions.
 - Authorized keys for ~root~ user are stored in ~ssh-keys/~ directory (no passphrase).
 - Enabling ~rpcbind~ and ~ssh~ services at boot.

**** Kali linux 2.0 light
Fresh install from http://cdimage.kali.org/kali-2.0/kali-linux-light-2.0-amd64.iso

 - Installation of linux kernel headers for vbox guest additions.
 - Installation of virtualbox guest additions.
 - Authorized keys for ~root~ user are stored in ~ssh-keys/~ directory (no passphrase).
 - Enabling ~rpcbind~ and ~ssh~ services at boot.

** Security warning
*** Kali linux 1.0
Virtual machine boot with sshd service running and may cause some security issues:
  - Bridged network is enabled by default.
  - Default root password of this box is insecure (toor).
  - Vagrant user is insecure
    + Private key stored in ~ssh-keys/~.
    + Password known (~tnargav~).
    + User in sudoers with no password required.

*** Kali linux 1.0.4
Virtual machine boot with sshd service running and may cause some security issues:
  - Bridged network is enabled by default.
  - Default root password of this box is insecure (toor).
*** Kali linux 1.1.0
Same as Kali linux 1.0.4
*** Kali linux 2.0
Same as Kali linux 1.1.0

** License
   See COPYING file
